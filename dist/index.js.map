{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sind = require( '@stdlib/math-base-special-sind' );\nvar cosd = require( '@stdlib/math-base-special-cosd' );\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of an angle measured in degrees and assigns the results to a provided output array.\n*\n* @private\n* @param {number} x - input value (in degrees)\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var v = sincosd( 0.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* @example\n* var v = sincosd( 90.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* @example\n* var v = sincosd( -30.0, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* @example\n* var v = sincosd( NaN, [ 0.0, 0.0 ], 1, 0 );\n* // returns [ NaN, NaN ]\n*/\nfunction sincosd( x, out, stride, offset ) {\n\tout[ offset ] = sind( x );\n\tout[ offset + stride ] = cosd( x );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sincosd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Simultaneously computes the sine and cosine of an angle measured in degrees.\n*\n* @param {number} x - input value (in degrees)\n* @returns {Array<number>} sine and cosine\n*\n* @example\n* var v = sincosd( 0.0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* @example\n* var v = sincosd( 90.0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* @example\n* var v = sincosd( -30.0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* @example\n* var v = sincosd( NaN );\n* // returns [ NaN, NaN ]\n*/\nfunction sincosd( x ) {\n\treturn assign( x, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sincosd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Simultaneously compute the sine and cosine of an angle measured in degrees.\n*\n* @module @stdlib/math-base-special-sincosd\n*\n* @example\n* var sincosd = require( '@stdlib/math-base-special-sincosd' );\n*\n* var v = sincosd( 0.0 );\n* // returns [ ~0.0, ~1.0 ]\n*\n* v = sincosd( 90.0 );\n* // returns [ ~1.0, ~0.0 ]\n*\n* v = sincosd( -30.0 );\n* // returns [ ~-0.5, ~0.866 ]\n*\n* v = sincosd( NaN );\n* // returns [ NaN, NaN ]\n*\n* @example\n* var sincosd = require( '@stdlib/math-base-special-sincosd' );\n*\n* var out = new Float64Array( 2 );\n*\n* var v = sincosd.assign( 0.0, out, 1, 0 );\n* // return <Float64Array>[ ~0.0, ~1.0 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,gCAAiC,EA+BrD,SAASC,EAASC,EAAGC,EAAKC,EAAQC,EAAS,CAC1C,OAAAF,EAAKE,CAAO,EAAIN,EAAMG,CAAE,EACxBC,EAAKE,EAASD,CAAO,EAAIJ,EAAME,CAAE,EAC1BC,CACR,CAKAL,EAAO,QAAUG,IC/DjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,IA2Bb,SAASC,EAASC,EAAI,CACrB,OAAOF,EAAQE,EAAG,CAAE,EAAK,CAAI,EAAG,EAAG,CAAE,CACtC,CAKAH,EAAO,QAAUE,ICFjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "sind", "cosd", "sincosd", "x", "out", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "assign", "sincosd", "x", "setReadOnly", "main", "assign"]
}
